// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	postgresql "github.com/qonto/postgresql-partition-manager/internal/infra/postgresql"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PostgreSQLClient is an autogenerated mock type for the PostgreSQLClient type
type PostgreSQLClient struct {
	mock.Mock
}

// AttachPartition provides a mock function with given fields: schema, table, parent, lowerBound, upperBound
func (_m *PostgreSQLClient) AttachPartition(schema string, table string, parent string, lowerBound string, upperBound string) error {
	ret := _m.Called(schema, table, parent, lowerBound, upperBound)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(schema, table, parent, lowerBound, upperBound)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTableLikeTable provides a mock function with given fields: schema, table, parent
func (_m *PostgreSQLClient) CreateTableLikeTable(schema string, table string, parent string) error {
	ret := _m.Called(schema, table, parent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(schema, table, parent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachPartitionConcurrently provides a mock function with given fields: schema, table, parent
func (_m *PostgreSQLClient) DetachPartitionConcurrently(schema string, table string, parent string) error {
	ret := _m.Called(schema, table, parent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(schema, table, parent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropTable provides a mock function with given fields: schema, table
func (_m *PostgreSQLClient) DropTable(schema string, table string) error {
	ret := _m.Called(schema, table)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(schema, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinalizePartitionDetach provides a mock function with given fields: schema, table, parent
func (_m *PostgreSQLClient) FinalizePartitionDetach(schema string, table string, parent string) error {
	ret := _m.Called(schema, table, parent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(schema, table, parent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetColumnDataType provides a mock function with given fields: schema, table, column
func (_m *PostgreSQLClient) GetColumnDataType(schema string, table string, column string) (postgresql.ColumnType, error) {
	ret := _m.Called(schema, table, column)

	var r0 postgresql.ColumnType
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (postgresql.ColumnType, error)); ok {
		return rf(schema, table, column)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) postgresql.ColumnType); ok {
		r0 = rf(schema, table, column)
	} else {
		r0 = ret.Get(0).(postgresql.ColumnType)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(schema, table, column)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEngineVersion provides a mock function with given fields:
func (_m *PostgreSQLClient) GetEngineVersion() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartitionSettings provides a mock function with given fields: schema, table
func (_m *PostgreSQLClient) GetPartitionSettings(schema string, table string) (string, string, error) {
	ret := _m.Called(schema, table)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (string, string, error)); ok {
		return rf(schema, table)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(schema, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(schema, table)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(schema, table)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetServerTime provides a mock function with given fields:
func (_m *PostgreSQLClient) GetServerTime() (time.Time, error) {
	ret := _m.Called()

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func() (time.Time, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPartitionAttached provides a mock function with given fields: schema, table
func (_m *PostgreSQLClient) IsPartitionAttached(schema string, table string) (bool, error) {
	ret := _m.Called(schema, table)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(schema, table)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(schema, table)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(schema, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsTableExists provides a mock function with given fields: schema, table
func (_m *PostgreSQLClient) IsTableExists(schema string, table string) (bool, error) {
	ret := _m.Called(schema, table)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(schema, table)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(schema, table)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(schema, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartitions provides a mock function with given fields: schema, table
func (_m *PostgreSQLClient) ListPartitions(schema string, table string) ([]postgresql.PartitionResult, error) {
	ret := _m.Called(schema, table)

	var r0 []postgresql.PartitionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]postgresql.PartitionResult, error)); ok {
		return rf(schema, table)
	}
	if rf, ok := ret.Get(0).(func(string, string) []postgresql.PartitionResult); ok {
		r0 = rf(schema, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgresql.PartitionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(schema, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostgreSQLClient creates a new instance of PostgreSQLClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgreSQLClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgreSQLClient {
	mock := &PostgreSQLClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
